{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Build AI Agents And Start Automating","text":"<p>A friendly, powerful framework for creating and connecting AI agents. Enable next-level automation\u2014faster and save your most precious resource: time.</p> Get Started in 5 Mins View on GitHub"},{"location":"#what-is-agentic-atlas","title":"What is Agentic Atlas?","text":"<p>Ever felt like building AI agents should be easier? We did too.</p> <p>Agentic Atlas is the infrastructure layer you've been missing. It's a set of tools and protocols designed to make building, deploying, and managing AI agents incredibly simple. Think of it as the operating system for your future agent workforce.</p> <p>We handle the boring stuff\u2014like making sure agents can talk to each other reliably\u2014so you can focus on what matters: bringing your creative ideas to life.</p> <ul> <li>Model-Agnostic: Use GPT or your own local models. We don't play favorites.</li> <li>Built for Collaboration: Our Agent-to-Agent (A2A) protocol makes creating multi-agent systems a breeze.</li> </ul>"},{"location":"#get-building-in-3-simple-steps","title":"Get Building in 3 Simple Steps","text":"<p>Ready to dive in? You can have your first agent running in less time than it takes to make a coffee.</p> 1. Install the Package <p>One simple command is all it takes to get the library into your environment.</p> Go to Installation \u2192 2. Write Your First Agent <p>Create a simple \"Echo Agent\" with just a few lines of Python code. No boilerplate, we promise.</p> Start the Quick Start \u2192 3. Explore the Guides <p>Learn how to build more complex agents, connect them to tools, and more.</p> Check out the Guides \u2192"},{"location":"#what-can-you-build","title":"What Can You Build?","text":"<p>The possibilities are endless, but here are a few ideas to start:</p> <ul> <li>A personal coding assistant that can write, review, and test your code.</li> <li>A team of research agents that collaborate to gather, synthesize, and report on any topic.</li> <li>An automation workflow that connects your favorite apps (like Slack, Notion, and Jira) together.</li> <li>A customer support agent that can intelligently answer questions and escalate issues.</li> </ul>"},{"location":"#join-the-community","title":"Join the Community","text":"<p>We're building this in the open, and we'd love for you to join us. Whether you're a seasoned AI engineer or just agent-curious, you're welcome here.</p> <ul> <li>GitHub Discussions: Ask questions, share your projects, and help shape the future of the protocol.</li> <li>Discord Server: Hop in to chat with the team and other developers in real-time.</li> </ul> <p>Let's build something awesome together!</p>"},{"location":"core-concepts/","title":"Core Concepts","text":"<p>Understanding a few core concepts will help you unlock the full power of <code>agentic atlas</code>.</p>"},{"location":"core-concepts/#agent","title":"Agent","text":"<p>An <code>Agent</code> is the fundamental building block. It's an autonomous entity that can perform tasks, communicate, and make decisions. Each agent runs in an isolated environment, can be assigned a unique ID, and is secured with a JWT token. You give it a name, a description (its \"prompt\" or \"constitution\"), and logic for how it handles messages.</p>"},{"location":"core-concepts/#agent-maker","title":"Agent Maker","text":"<p>The Agent Maker is the developer toolset for creating, configuring, and registering agents. It generates starter code, registers agent metadata, and assigns the JWT token required for authentication.</p>"},{"location":"core-concepts/#cloud-agents","title":"Cloud Agents","text":"<p>Cloud Agents are deployed to managed infrastructure for persistent, scalable execution. They can handle long-running processes, scale automatically, and integrate with external APIs or event streams.</p> <p>Example: A fraud_detector cloud agent continuously analyzes transactions in real time and flags anomalies.</p>"},{"location":"core-concepts/#message","title":"Message","text":"<p>Agents communicate using <code>Message</code> objects. A message is a simple data structure that contains the content (text), the sender, and the recipient. Our protocol ensures these messages can be reliably sent between agents, whether they are running on the same machine or across the internet.</p>"},{"location":"core-concepts/#backend","title":"Backend","text":"<p>The <code>Backend</code> is the engine that powers the agents. It manages the agent lifecycle, message queuing, and state. When you use the <code>run()</code> function, you are starting a simple, local backend. For more complex applications, you can run a persistent backend server that manages multiple agents.</p>"},{"location":"core-concepts/#protocol-a2a","title":"Protocol (A2A)","text":"<p>The Agent-to-Agent (A2A) protocol is the set of rules that governs how agents communicate. It defines how messages are formatted, addressed, and routed. You don't usually need to interact with the protocol directly, but it's what enables the powerful multi-agent systems you can build with <code>agentic atlas</code>.</p>"},{"location":"core-concepts/#mcp","title":"MCP","text":"<p>The MCP Server (Multi-Channel Processing Server) orchestrates agent execution and communication. It handles routing of messages, monitoring, logging, error handling, and resource management. Agents remain loosely coupled while working together as part of complex workflows.</p> <p>Example: When a document_parser agent finishes extracting data, the MCP Server triggers a compliance_checker agent to validate it.</p>"},{"location":"core-concepts/#agent-flows","title":"Agent Flows","text":"<p>Agent Flows define the sequence and logic of multiple agents working together. They support sequential, parallel, and conditional execution, and can include automated or human-in-the-loop steps. In Agentic Atlas we use drag and drop diagrams to make it easier for the user to create these flows. We implement a central manager/orchestrator invokes specialized sub\u2011agents as tools and retains control of the conversation.</p> <p>Example Flow: Speaking + Translation Agents. Imagine a flow with two agents: Speaker Agent \u2013 generates a message in English.Translator Agent \u2013 translates the message into Spanish.</p>"},{"location":"core-concepts/#marketplace","title":"Marketplace","text":"<p>The Marketplace is a platform for discovering, publishing, and reusing agents and flows. It supports versioning, ratings, and metadata, making it easy to integrate community or team-built agents into your own workflows.</p> <p>Example: A currency_converter agent published in the Marketplace can be integrated into multiple travel or finance workflows without rewriting logic.</p>"},{"location":"installation/","title":"Installation","text":"<p>Welcome to <code>agentic-atlas</code>! We're excited to have you here. Let's get the necessary tools installed so you can start building. </p> <p>The best way to install the <code>agentic-atlas</code> package is through <code>pip</code>, Python's package installer.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following installed:</p> <ul> <li>Docker</li> <li>Docker Compose</li> <li> <p><code>make</code> (optional)</p> </li> <li> <p>macOS: <code>brew install make</code></p> </li> <li>Linux: <code>sudo apt-get install make</code></li> </ul>"},{"location":"installation/#local-setup","title":"\ud83d\ude80 Local Setup","text":"<ol> <li>Clone the repository:</li> </ol> <p><code>bash    git clone https://github.com/genai-works-org/genai-agentos.git    cd genai-agentos/</code></p> <ol> <li>Create a <code>.env</code> file by copying the example (can be empty and customized later):</li> </ol> <p><code>bash    cp .env-example .env</code></p> <ul> <li>A <code>.env</code> file should be present for configuration.</li> <li> <p>All variables in <code>.env-example</code> are commented.      You can customize any environment setting by uncommenting the relevant line and providing a new value.</p> </li> <li> <p>Start Docker desktop and ensure it is running.</p> </li> <li> <p>Start the infrastructure:</p> </li> </ul> <p><code>bash    make up    # or alternatively    docker compose up</code></p> <ol> <li> <p>After startup:</p> </li> <li> <p>Frontend UI: http://localhost:3000/</p> </li> <li>Swagger API Docs: http://localhost:8000/docs#/</li> </ol>"},{"location":"installation/#agentic-atlas-cli","title":"Agentic Atlas CLI","text":"<p>A command-line tool for interacting with the GenAI infrastructure. It allows you to register users, manage agents, and run them in isolated environments.</p>"},{"location":"installation/#installation_1","title":"Installation","text":""},{"location":"installation/#option-1-install-pre-built-binary","title":"Option 1: Install Pre-Built Binary","text":""},{"location":"installation/#linux-macos","title":"Linux / macOS","text":"<ol> <li>Run the installation script:     <code>bash     ./install_cli.sh</code></li> <li>Enter your system password when prompted to install the binary to <code>/usr/local/bin</code>.</li> <li>Verify the installation:     <code>bash     genai --help</code></li> </ol>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Set the <code>GITHUB_TOKEN</code> environment variable in PowerShell:     <code>powershell     [Environment]::SetEnvironmentVariable(\"GITHUB_TOKEN\", \"your_token_here\", \"User\")</code></li> <li>Run the installation script:     <code>powershell     .\\install_cli.ps1</code></li> <li>Verify the installation:     <code>powershell     .\\genai.exe --help</code> <p>Note: This process will be simplified once the repository is public.</p> </li> </ol>"},{"location":"installation/#option-2-build-from-source","title":"Option 2: Build From Source","text":""},{"location":"installation/#linux-macos_1","title":"Linux / macOS","text":"<p>You can run the build script:</p> <pre><code>./build_cli.sh\n</code></pre> <p>Or build manually:</p> <ol> <li>Ensure <code>python3.12</code> and <code>uv</code> are installed.</li> <li> <p>Run:</p> <p><code>bash  uv run pyinstaller --onefile --name genai.bin cli.py</code></p> </li> </ol>"},{"location":"installation/#windows_1","title":"Windows","text":"<p>Build using:</p> <p><code>powershell   ./build_cli.ps1</code></p> <p>This uses Nuitka to compile into a Windows-friendly executable that avoids malware flags.</p> <p>And that's it! You now have the core agentic atlas library installed and are ready to go.</p> <p>Now that you're all set up, let's move on to the Quick Start and build something!</p>"},{"location":"quick-start/","title":"Quick Start: Your First Agent in 5 Minutes","text":"<p>This guide will get you from zero to a running AI agent in just a few minutes. We'll create a simple \"Echo Agent\" that replies with whatever you send it. This is the \"Hello, World!\" of agent building.</p>"},{"location":"quick-start/#tldr-quick-commands","title":"TL;DR (Quick Commands)","text":"<pre><code># 1. Install\npip install genai-cli\n\n# 2. Authenticate\ngenai signup -u &lt;new_username&gt;       # first-time users\ngenai login -u &lt;your_username&gt; -p &lt;your_password&gt;\n\n# 3. Create Agent\ngenai register_agent --name my_cool_agent --description \"This agent does something awesome\"\n\n# 4. Set Up Environment\ncd agents/my_cool_agent\nuv venv &amp;&amp; uv sync                   # or: python3 -m venv venv\n\n# 5. Run Agent\ngenai run_agents\n# or\npython my_cool_agent.py\n</code></pre>"},{"location":"quick-start/#step-1-install-genai-cli","title":"Step 1: Install GenAI CLI","text":"<pre><code>pip install genai-cli\n</code></pre>"},{"location":"quick-start/#step-2-authenticate","title":"Step 2: Authenticate","text":"<p>If you already have a GenAI account:  </p> <pre><code>genai login -u &lt;your_username&gt; -p &lt;your_password&gt;\n</code></pre> <p>For first-time users:  </p> <pre><code>genai signup -u &lt;new_username&gt;\n</code></pre> <p>Your JWT token will be saved in <code>~/.genai/credentials</code> and used for agent-related operations.  </p> <p>Note: You must be logged in to create or run agents.  </p>"},{"location":"quick-start/#step-3-create-an-agent","title":"Step 3: Create an Agent","text":"<p>Register a new agent:  </p> <pre><code>genai register_agent --name my_cool_agent --description \"This agent does something awesome\"\n</code></pre> <p>This will: - Register metadata in the backend - Create a Python file in <code>agents/</code> - Assign a JWT to the agent (stored in the file)  </p> <p>Do not modify the JWT \u2014 it is required to validate your agent.  </p>"},{"location":"quick-start/#step-4-set-up-the-agent-environment","title":"Step 4: Set Up the Agent Environment","text":"<ol> <li>Move into the agent directory:  </li> </ol> <p><code>bash    cd agents/my_cool_agent</code></p> <ol> <li>Create and sync a virtual environment:  </li> </ol> <p><code>bash    uv venv    uv sync</code></p> <p>Alternatively:  </p> <p><code>bash    python3 -m venv venv</code></p>"},{"location":"quick-start/#step-5-run-your-agent","title":"Step 5: Run Your Agent","text":"<p>Agents are isolated Python files with their own dependencies. To run all agents:  </p> <pre><code>genai run_agents\n</code></pre> <p>Or run a single agent directly:  </p> <pre><code>python my_cool_agent.py\n</code></pre> <p>If no virtual environment is found, GenAI will fallback to the parent folder or return an error.  </p>"},{"location":"quick-start/#step-6-optional-register-an-agent-via-api","title":"Step 6 (Optional): Register an Agent via API","text":"<p>You can also register agents manually using the API.  </p> <ol> <li>Open the docs at <code>http://localhost:8000/docs</code>.  </li> <li>Log in or sign up.  </li> <li>Use the <code>/api/agents/register</code> endpoint.  </li> </ol> <p>Example response:  </p> <pre><code>{\n  \"id\": \"uuid-here\",\n  \"name\": \"my_cool_agent\",\n  \"description\": \"does something great\",\n  \"jwt\": \"your-agent-jwt\"\n}\n</code></pre> <ol> <li>Add the JWT to your agent, each agent should have its own key:  </li> </ol> <p><code>python    session = GenAISession(jwt_token=\"your-agent-jwt\")</code></p> <ol> <li>Generate the agent file:  </li> </ol> <p><code>bash    genai generate_agent --id uuid-here</code></p>"},{"location":"quick-start/#step-7-agent-template-example","title":"Step 7: Agent Template Example","text":"<p>A typical agent file looks like this:</p> <pre><code>import asyncio\nfrom typing import Annotated\nfrom genai_session.session import GenAISession\nfrom genai_session.utils.context import GenAIContext\n\nAGENT_JWT = \"your-agent-jwt\"\nsession = GenAISession(jwt_token=AGENT_JWT)\n\n@session.bind(name=\"my_cool_agent\", description=\"does something great\")\nasync def my_cool_agent(\n    agent_context: GenAIContext,\n    test_arg: Annotated[str, \"Test argument\"]\n):\n    return \"Hello, World!\"\n\nasync def main():\n    print(f\"Agent with token '{AGENT_JWT}' started\")\n    await session.process_events()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>You\u2019re ready! Your agent can now be developed, customized, and run inside its own environment.  </p>"},{"location":"guides/01-building-your-first-agent/","title":"Build your first Agent","text":"<p>As an example, we will create our first agent that translates text, after we set up our environment. Let's do the following steps!</p> <ul> <li>Register your agent</li> </ul> <pre><code>genai register_agent --name translate_agent --description \"This agent is a powerful bilingual translator\"\n</code></pre> <ul> <li>Set Up Environment</li> </ul> <pre><code>cd agents/my_cool_agent\nuv venv &amp;&amp; uv sync                   \n# or: \npython3 -m venv venv\n</code></pre> <p>Here is our translator agent, it uses an openai key, remember to use your own key.</p> <pre><code>import asyncio\nimport os\nfrom typing import Any, Annotated\n\nfrom genai_session.session import GenAISession\nfrom openai import OpenAI\n\nsession = GenAISession()\n\nOPENAPI_KEY = os.environ.get(\"OPENAPI_KEY\")\n\nopenai_client = OpenAI(\n    api_key=OPENAPI_KEY\n)\n\n\n@session.bind(name=\"get_translation\", description=\"Translate the text into specified language\")\nasync def get_translation(\n        agent_context, text: Annotated[str, \"Text to translate\"],\n        language: Annotated[str, \"Code of the language to translate to (e.g. 'fr', 'es')\"]\n) -&gt; dict[str, Any]:\n    agent_context.logger.info(\"Inside get_translation\")\n    prompt = f\"Translate the text into specified language {language}.\\n\\n{text}\"\n\n    response = openai_client.chat.completions.create(\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": prompt\n            }\n        ],\n        model=\"gpt-4o-mini\"\n    )\n    translation = response.choices[0].message.content\n    return {\"translation\": translation}\n\n\nasync def main():\n    await session.process_events()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <ul> <li>Run Agent</li> </ul> <pre><code>genai run_agents\n</code></pre>"},{"location":"guides/01-building-your-first-agent/#agent-lifecycle","title":"Agent Lifecycle","text":"<ol> <li>Create agent</li> <li>Test locally  </li> <li>Deploy as Cloud Agent  </li> <li>Orchestrate with MCP Server  </li> <li>Compose Agent Flows  </li> <li>Publish or install via Marketplace  </li> </ol>"},{"location":"guides/01-building-your-first-agent/#agent-template-example","title":"Agent Template Example","text":"<p>Most agents will follow this template:</p> <pre><code>import asyncio\nfrom typing import Annotated\nfrom genai_session.session import GenAISession\nfrom genai_session.utils.context import GenAIContext\n\nAGENT_JWT = \"your-agent-jwt\"\nsession = GenAISession(jwt_token=AGENT_JWT)\n\n@session.bind(name=\"my_cool_agent\", description=\"does something great\")\nasync def my_cool_agent(\n    agent_context: GenAIContext,\n    test_arg: Annotated[str, \"Test argument\"]\n):\n    return \"Hello, World!\"\n\nasync def main():\n    print(f\"Agent with token '{AGENT_JWT}' started\")\n    await session.process_events()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/02-Local-Agents/","title":"Local Agents","text":""},{"location":"guides/02-Local-Agents/#overview","title":"Overview","text":"<p>A Local Agent is an autonomous process that runs directly on your machine or private infrastructure and connects to the Agentic Atlas network through a local or exposed router endpoint.  </p> <p>Local agents are ideal for:</p> <ul> <li>Rapid development and debugging  </li> <li>Offline or on-premises deployments  </li> <li>Scenarios where you need full control over your data and compute resources  </li> <li>Integrations with local APIs, models, or tools  </li> </ul> <p>Unlike Cloud Agents, local agents operate entirely within your environment while still communicating securely with the wider Agentic Atlas ecosystem.</p>"},{"location":"guides/02-Local-Agents/#authentication","title":"Authentication","text":"<p>Every agent in Agentic Atlas requires a unique JWT token to authenticate with the router. This ensures that only authorized agents can register, communicate, and execute tasks within the system.</p> <p>Each agent has its own token, which must be defined in its local environment file (<code>.env</code>).</p>"},{"location":"guides/02-Local-Agents/#environment-variable","title":"Environment Variable","text":"<pre><code>AGENT_JWT_TOKEN=&lt;your-agent-token&gt;\n</code></pre> <p>This token is used automatically when the agent starts and connects to the router.</p>"},{"location":"guides/02-Local-Agents/#how-to-generate-your-token","title":"How to generate your token","text":"<p>You can generate your agent token directly in the Agentic Atlas platform.</p> <ol> <li>Log in to your AgentOS Platform.  </li> <li>Go to Local Agents \u2192 Generate Token.  </li> <li>Copy the generated JWT token.  </li> <li>Paste it into your agent\u2019s <code>.env</code> file under the variable <code>AGENT_JWT_TOKEN</code>.  </li> </ol> <p>\ud83d\udca1 Tip: You can generate and manage multiple tokens \u2014 one per agent instance \u2014 to maintain fine-grained access control.</p> <p>\u26a0\ufe0f Important: Never share or commit your token to version control. Treat it as a secret.</p>"},{"location":"guides/02-Local-Agents/#development-notes","title":"Development Notes","text":"<ul> <li>Isolation \u2192 Use a virtual environment or container for each agent to prevent dependency conflicts.  </li> <li>Hot Reloading \u2192 For rapid iteration, use tools like <code>watchfiles</code> or <code>uvicorn --reload</code> (if applicable).  </li> <li>Logging \u2192 Enable verbose logging for message tracing.  </li> <li>Reconnection Logic \u2192 Handle token expiration and reconnection gracefully.  </li> </ul>"},{"location":"guides/02-Local-Agents/#best-practices","title":"Best Practices","text":"Area Recommendation Security Use a unique <code>AGENT_JWT_TOKEN</code> per agent. Never reuse or hardcode tokens. Performance Monitor local resource usage (CPU, memory). Data Privacy Keep sensitive data local; avoid unnecessary uploads to the router. Debugging Use structured logs and unique agent identifiers for traceability. Deployment For long-running local agents, consider Docker for consistency."},{"location":"guides/02-Local-Agents/#example-workflow","title":"Example Workflow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant LocalAgent\n    participant Router\n    participant Backend\n\n    User-&gt;&gt;LocalAgent: Run agent.py\n    LocalAgent-&gt;&gt;Router: Connect (includes AGENT_JWT_TOKEN)\n    Router-&gt;&gt;Backend: Validate JWT token\n    Backend--&gt;&gt;Router: Token valid \u2192 authorize connection\n    Router--&gt;&gt;LocalAgent: Registration successful\n    Backend--&gt;&gt;Router: Dispatch task\n    Router--&gt;&gt;LocalAgent: Deliver task\n    LocalAgent--&gt;&gt;Router: Return result\n    Router--&gt;&gt;Backend: Forward response\n</code></pre>"},{"location":"guides/03-Cloud-Agents/","title":"Cloud Agents","text":""},{"location":"guides/03-Cloud-Agents/#overview","title":"Overview","text":"<p>A Cloud Agent is an agent deployed to the Agentic Atlas cloud infrastructure by importing or uploading your local agent project or creating your own agent. In this workflow you either use Agent Maker (prompt-based scaffolding) or Upload a ZIP of your agent \u2014 that\u2019s it. The platform builds and runs the agent in the cloud for you.</p> <p>Cloud agents are ideal for: - Quick deployments of local agents to a managed runtime - Production or shared team agents that need uptime and scalability - Running agents that require cloud compute (GPUs, larger memory, persistent networking)</p>"},{"location":"guides/03-Cloud-Agents/#key-concepts","title":"Key Concepts","text":"<ul> <li>Import &amp; Upload: You can import your local agent directly into the platform and deploy it. No complex containerization required.</li> <li>Agent Maker: Use a natural-language prompt to auto-generate an agent scaffold \u2014 great for prototyping or generating an agent from a brief description.</li> <li>Upload ZIP: Zip your agent project (code, requirements, and metadata) and upload it to the platform; the platform extracts, builds, and runs it.</li> <li>Secrets &amp; Env: Each cloud agent still uses an <code>AGENT_JWT_TOKEN</code> for authentication. For cloud deployments, if you are using the agent maker it will be automatically generated so there's no need to upload an .env file.</li> </ul>"},{"location":"guides/03-Cloud-Agents/#quick-steps-two-ways-to-deploy","title":"Quick Steps \u2014 Two Ways to Deploy","text":""},{"location":"guides/03-Cloud-Agents/#option-a-agent-maker-prompt-agent","title":"Option A \u2014 Agent Maker (Prompt \u2192 Agent)","text":"<ol> <li>Go to Dashboard \u2192 Agent Maker.  </li> <li>Enter a clear prompt describing the agent\u2019s goal, capabilities, and any required prompts or integrations (examples of desired behavior, APIs to call, etc.).  </li> <li>Review and edit the generated scaffold if needed (the platform gives you a preview/editor).  </li> <li>Configure runtime settings (Python version, resource tier)  </li> <li>Deploy. The platform builds and runs the agent in its cloud infra, it will register and install the agent. Monitor logs and health from the agent can be turned on too via prompt.</li> </ol>"},{"location":"guides/03-Cloud-Agents/#option-b-upload-a-zip-your-local-agent-cloud","title":"Option B \u2014 Upload a ZIP (Your Local Agent \u2192 Cloud)","text":"<ol> <li>Prepare your local agent directory. Typical files:</li> <li><code>agent.py</code> (or your entrypoint)  </li> <li><code>requirements.txt</code> </li> <li><code>Procfile</code> or <code>start.sh</code> (optional; specify start command)  </li> <li><code>agent.yaml</code> or <code>manifest.json</code> (optional metadata: name, entrypoint, runtime)  </li> <li><code>.env</code> (local only \u2014 remove secrets before zipping)  </li> <li>Zip the folder:</li> </ol> <pre><code>zip -r my-agent.zip my-agent-folder/\n</code></pre> <ol> <li>In the platform dashboard: Dashboard \u2192 Agents \u2192 Upload Agent \u2192 Choose ZIP, then upload <code>my-agent.zip</code>.  </li> <li>Configure runtime (instance type, region, scaling) and deploy. The platform will run your agent in the cloud infra and surface logs, metrics, and health checks.</li> </ol>"},{"location":"guides/03-Cloud-Agents/#recommended-practices","title":"Recommended Practices","text":"<ul> <li>Secrets: Use the platform secret manager for <code>AGENT_JWT_TOKEN</code> and other credentials.  </li> <li>No secrets in ZIPs: Remove <code>.env</code> or any files containing secrets before creating the ZIP.  </li> <li>Single responsibility: Keep one agent per upload for simpler versioning and monitoring.  </li> <li>Logs &amp; Monitoring: Connect platform logs to your observability tools or use the built-in dashboard.  </li> <li>Versioning: Tag uploads or use the platform\u2019s versioning to enable rollbacks.  </li> <li>Testing: Test locally with a local router and your <code>AGENT_JWT_TOKEN</code> before uploading.</li> </ul>"},{"location":"guides/03-Cloud-Agents/#minimal-example-manifest-optional","title":"Minimal Example Manifest (optional)","text":"<p>You can include a short <code>agent.yaml</code> to hint entrypoint/runtime to the platform:</p> <pre><code>name: my-cloud-agent\nentrypoint: agent.py\nruntime: python:3.11\nstart_cmd: python agent.py\n</code></pre>"},{"location":"guides/03-Cloud-Agents/#example-workflow-zip-upload","title":"Example Workflow (Zip Upload)","text":"<pre><code>sequenceDiagram\n    participant Dev\n    participant Platform\n    participant CloudAgentRuntime\n    participant Router\n\n    Dev-&gt;&gt;Platform: Upload my-agent.zip (or use Agent Maker with a prompt)\n    Platform-&gt;&gt;Platform: Build and configure runtime\n    Platform--&gt;&gt;CloudAgentRuntime: Start agent with assigned AGENT_JWT_TOKEN (or user token)\n    CloudAgentRuntime-&gt;&gt;Router: Connect using AGENT_JWT_TOKEN\n    Router-&gt;&gt;Platform: Validate token &amp; register agent\n    Platform--&gt;&gt;Dev: Deploy complete; logs &amp; health available in dashboard\n</code></pre>"},{"location":"guides/03-Cloud-Agents/#tldr","title":"TL;DR","text":"<ul> <li>To deploy a cloud agent, import or upload your local agent to the platform.  </li> <li>Use Agent Maker for prompt-based scaffolding or Upload ZIP for your existing project.  </li> <li>That\u2019s it \u2014 the platform handles building, running, and monitoring the agent in the cloud.</li> </ul>"}]}